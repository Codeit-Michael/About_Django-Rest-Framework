Requirements:
pip install djangorestframework
pip install markdown       # Markdown support for the browsable API.
pip install django-filter  # Filtering support

## SETTING UP ##
1. List the 'rest_framework' on your settings.py/'INSTALLED_APPS'
2. Add the ff. at {proj. name}/urls.py for login/logout views:
    path('api-auth/', include('rest_framework.urls'))

Additional:
a. Any global settings for a REST framework API are kept in a single configuration
dictionary named REST_FRAMEWORK. Start off by adding the following to your settings.py
module:
	REST_FRAMEWORK = {
	    # Use Django's standard `django.contrib.auth` permissions,
	    # or allow read-only access for unauthenticated users.
	    'DEFAULT_PERMISSION_CLASSES': [
	        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
	    ]
	}

b. Add 'rest_framework' to INSTALLED_APPS

c. Edit the {project}/urls.py:from django.contrib import admin
	from django.urls import path, include
	from django.contrib.auth.models import User
	from rest_framework import routers, serializers, viewsets

	# Serializers define the API representation.
	class UserSerializer(serializers.HyperlinkedModelSerializer):
	    class Meta:
	        model = User
	        fields = ['url', 'username', 'email', 'is_staff']

	# ViewSets define the view behavior.
	class UserViewSet(viewsets.ModelViewSet):
	    queryset = User.objects.all()
	    serializer_class = UserSerializer

	# Routers provide an easy way of automatically determining the URL conf.
	router = routers.DefaultRouter()
	router.register(r'users', UserViewSet)

	# Wire up our API using automatic URL routing.
	# Additionally, we include login URLs for the browsable API.include
	urlpatterns = [
		path('admin/', admin.site.urls),
		path('', include(router.urls)),
		path('api-auth/', include('rest_framework.urls',namespace='rest_framework')),
	]



## QUICKSTART ##
We're going to create a simple API to allow admin users to view and edit the users and groups in the system.

	# Create the project directory
	mkdir tutorial
	cd tutorial

	# Create a virtual environment to isolate our package dependencies locally
	python3 -m venv env
	source env/bin/activate  # On Windows use `env\Scripts\activate`

	# Install Django and Django REST framework into the virtual environment
	pip install django
	pip install djangorestframework

	# Set up a new project with a single application
	django-admin startproject tutorial .  # Note the trailing '.' character
	cd tutorial
	django-admin startapp quickstart
	cd ..

-It's unusual to make apps inside the projects but we just do that to avoid messing 
around with other files out there. Now make a superuser and migrate:
	python3 manage.py migrate


*Serializers - in tutorial/quickstart/ create serializers.py that we'll use for our
data representations:
	class UserSerializer(serializers.HyperlinkedModelSerializer):
	    class Meta:
	        model = User
	        fields = ['url', 'username', 'email', 'groups']


	class GroupSerializer(serializers.HyperlinkedModelSerializer):
	    class Meta:
	        model = Group
	        fields = ['url', 'name']


*Views
	from django.contrib.auth.models import User, Group
	from rest_framework import viewsets
	from rest_framework import permissions
	from tutorial.quickstart.serializers import UserSerializer, GroupSerializer


	class UserViewSet(viewsets.ModelViewSet):
	    """
	    API endpoint that allows users to be viewed or edited.
	    """
	    queryset = User.objects.all().order_by('-date_joined')
	    serializer_class = UserSerializer
	    permission_classes = [permissions.IsAuthenticated]


	class GroupViewSet(viewsets.ModelViewSet):
	    """
	    API endpoint that allows groups to be viewed or edited.
	    """
	    queryset = Group.objects.all()
	    serializer_class = GroupSerializer
	    permission_classes = [permissions.IsAuthenticated]

Rather than write multiple views we're grouping together all the common behavior into
classes called ViewSets. We can easily break these down into individual views if we
need to, but using viewsets keeps the view logic nicely organized as well as being
very concise.


*URLS
	from django.urls import include, path
	from rest_framework import routers
	from tutorial.quickstart import views

	# registering viewset with router class for matic generating the URLConf for API
	""" we need more control over the API URLs we can simply drop down to using
	regular class-based views, and writing the URL conf explicitly """
	router = routers.DefaultRouter()
	router.register(r'users', views.UserViewSet)
	router.register(r'groups', views.GroupViewSet)

	# Wire up our API using automatic URL routing.
	# Additionally, we include login URLs for the browsable API.
	urlpatterns = [
		path('', include(router.urls)),
		path('api-auth/', include('rest_framework.urls', namespace='rest_framework'))
	]

-Finally, we're including default login and logout views for use with the browsable
API. That's optional, but useful if your API requires authentication and you want to
use the browsable API.


*Pagination - Pagination allows you to control how many objects per page are
returned. To enable it add the following lines to tutorial/settings.py:
	REST_FRAMEWORK = {
	    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
	    'PAGE_SIZE': 10
	}

 -And always remember to add 'rest_framework' on your 'INSTALLED_APPS'